.. _documentation-label:

Documentation
*************

In the following sections explain the usage and all relevant input files with corresponding parameters.

.. _inputfiles-label:

Usage
=====

1) Calculate the normal modes of a given input geometry using Gaussian, Turbomole or SNF and copy the output file (e.g. :code:`g98.out`, :code:`aoforce.out` or :code:`snf.out`) in your working directory.

2) Create an input file for ARTAIOS in your working directory.

3) Create a file :code:`input.json` containing at the following working example

.. code-block:: json

   {
   "sp_control": {
         "qc_prog": "turbomole",
         "params": {
           "use resolution of identity": false,
           "define_str": "\n\na coord\n*\nno\nb all TZ\n*\neht\n\n\n\n*"
         }
   },
   "vib_out": "snf",
   "vib_out_file": "snf.out",
   "artaios_in": "artaios.in",
   "mp": 4
   }

This tells pyIETS to use Turbomole for single point calculations by employing the parameters provided in :code:`params`.
The following three parameters tell pyIETS the names of the files created in step 1) and 2). 
The flag :code:`mp` specifies the number of single point calculations that will be run in parallel (each on a different core).
Further examples are provided in the :code:`tests`-directory.

After setting up the input files run pyIETS via

.. code-block:: bash

   pyiets input.json

The program should have generated two folders and one file. The file is named via the :code:`iets_out_file`-tag and contains the IETS-spectrum. 
The folders are named via the :code:`mode_folder` and :code:`output_folder`-tag, respectively.
The former contains the single-point calculations and transport calculations of the undistorted and distorted molecule which was provided.
The latter contains the resulting Troisi-greensmatrices and the corresponding calculations are saved in files named via the :code:`troisi_greenmatrix_file`-tag.

Two-component calculations with Turbomole
---------------------------------------

Two-component calculations can be performed as well.
For this purpose, first perform a single-component calculation of the IETS spectrum as described above.
Then adjust the input files:

- The :code:`artaios_in` should be adjusted to separately treat spin up and spin down electrons (set :code:`nspin 4` in the :code:`system` field )
- The parameters :code:`tcc` and :code:`define_str` in the :code:`input.json`-file should be adjusted, respectively. Often it makes sense to specify the :code:`iets_output_file`. Otherwise the file would be overwritten.


Speeding up
-----------

For speeding up the calculation use initial guesses of the occupied molecular orbitals and start vectors from a previously performed single point calculation of the equilibrium structure (structure of the molecule provided in the vibrational calculation). 

In Turbomole this can be achived by using the :code:`use <path to control-file>` instead of :code:`eht` in the :code:`define_str`-parameter.


Input files
===========
The proram takes three input files. In the following each file is described in detail including a complete list of input parameters.

.. _inputjson-label: 

First input file: :code:`input.json`
-----------------------------------

:code:`artaios_bin` 
^^^^^^^^^^^^^^^^^^^

ARTAIOS executable (default: :code:`"artaios"`).

:code:`artaios_restart_file`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Name of the file containing information about already finished single point calculations (default: :code:`"artaios.restart"`).
  
:code:`artaios_out`
^^^^^^^^^^^^^^^^^^^

Name of the files containing ARTAIOS logs (default: :code:`"artaios_out"`).

:code:`artaios_stdout`
^^^^^^^^^^^^^^^^^^^

Name of the files containing ARTAIOS standard output (default: :code:`"artaios.in.stdout"`).

:code:`artaios_stderr`
^^^^^^^^^^^^^^^^^^^

Name of the files containing ARTAIOS error output(default: :code:`"artaios.in.stderr"`).

:code:`artaios_tm`
^^^^^^^^^^^^^^^^^^^

ARTAIOS-tm2unformcl executable (default: :code:`"tm2unformcl"`).

:code:`artaios_soc_tm`
^^^^^^^^^^^^^^^^^^^

ARTAIOS-tm2unformsoc executable (default: :code:`"tm2unformsoc"`).


:code:`cstep`
^^^^^^^^^^^^^^^^^^^

Distortion in Bohr (default: :code:`0.01`).

:code:`iets_out_file`
^^^^^^^^^^^^^^^^^^^

Name or path of output file. This file contains the IETS-spectrum and is generated by running :code:`pyiets .` (default: :code:`"iets.dat"`).

:code:`input_file`
^^^^^^^^^^^^^^^^^^^

Filename of the json file which contains the program configuration (default: :code:`"input.json"`)

:code:`mp`
^^^^^^^^^^^^^^^^^^^

Number of single point calculations :math:`N_{\mathrm{sp}} = N_{\mathrm{modes}} + 1` to run concurrently. pyIETS will start TURBOMOLE and ARTAIOS on different cores. The single point calculations usually are the most time consuming part of the calculation. The number of single point calculations performed by the pyIETS is equal to the number of modes one specifies in :code:`modes` plus one single point calculation for the equlibrium structure. Be aware that, the internal paralisation of of the quantum chemistry program can be controlled independently. If an independent single point calculation runs on :math:`N_{\mathrm{qc}}` cores the most efficient values for :code:`mp` will be multiples of :math:`\frac{N_{\mathrm{sp}}}{N_{\mathrm{qc}}}` (default: :code:`1`). 

:code:`mode_folder`
^^^^^^^^^^^^^^^^^^^

Folder containing ARTAIOS transport calculations to calculate the greensmatrices of the distorted geometries (default: :code:`"distortions"`)

:code:`modes`
^^^^^^^^^^^^^^^^^^^

Either a string or a list of integers specifying the modes for which pyIETS calculates inelastric tunneling intensities. If a list is provided the vibrational modes in the file, specified by :code:`vib_out_file`, are accessed by index. Note however that indexing starts from 0. That means modes 1, 2, 3 in the file specified by :code:`vib_out_file` are accessed by :code:`[0, 1, 2]` (default: :code:`"all"`).

:code:`output_folder`
^^^^^^^^^^^^^^^^^^^

Folder containing ARTAIOS transport calculations while taking the Troisi greensmatrices as input (default: :code:`"output"`)

:code:`output_folder_prefix`
^^^^^^^^^^^^^^^^^^^

Prefix of the subfolders in :code:`output_folder` (default: :code:`"mode"`)

:code:`restart`
^^^^^^^^^^^^^^^

If set to :code:`true` looks for :code:`mode_folder` and :code:`output_folder` to restart old calculations. This can save a lot of time and resources (default: :code:`false`). DO NOT change to :code:`true` if you changed parameters after the prior run of pyIETS!

:code:`sp_control`
^^^^^^^^^^^^^^^^^^

Dictionary containing the following options for the single point calculations:

- :code:`qc_prog`

String defining the quantum chemistry program. Either :code:`"turbomole"` or :code:`"gaussian"` (default: :code:`"turbomole"`).

- :code:`params`

Dictionary containing parameters for single point calculation (default: :code:`null`). 
If you set :code:`qc_prog` to :code:`turbomole` a list of all parameters you can set is shown here ASE-turbomole_.
If you set :code:`qc_prog` to :code:`gaussian` you can set following parameters:

   - :code:`muliplicity` specifies the spin multiplicity (default: :code:`1`).

   - :code:`charge` specifies the charge of the molecule (default: :code:`0`)

   - :code:`basis` specifies the name of Gaussian basis set (default: :code:`"Def2SVP"`).

   - :code:`method` specifies the name of Gaussian functional (default: :code:`"BP86"`).

   - :code:`nprocshared` specifies the number of cores used by Gaussian (default: :code:`1`).

:code:`sp_restart_file`
^^^^^^^^^^^^^^^^^^^

Important  if you set :code:`restart` to :code:`true`.
This file contains the directory names in which single point calculations have already finished. The file is located in :code:`mode_folder`. (default: :code:`"sp.restart"`). 

:code:`sp_name`
^^^^^^^^^^^^^^^^^^^

Name of the folder that will contain the single point calculation of the undistorted structure (default: :code:`"sp"`).

:code:`tcc`
^^^^^^^^^^^^^^^^^^^

Turn off/on two-component calculation. Only compatible with :code:`turbomole` (default: :code:`false`).

:code:`troisi_greenmatrix_file`
^^^^^^^^^^^^^^^^^^^

Name of the file containing the Troisi greensmatrix (default: :code:`"greenmatrix"`).

:code:`verbose`
^^^^^^^^^^^^^^^^^^^

Switching on/off of verbose output for debugging and insight into greenmatrices (default: :code:`false`).

:code:`vib_out`
^^^^^^^^^^^^^^^^^^^

Set to :code:`"snf"`, :code:`"gaussian"` or :code:`"turbomole"` (default: :code:`"snf"`).

:code:`vib_out_file`
^^^^^^^^^^^^^^^^^^^

Path to file in which normal where calculated (default: :code:`"snf.out"`). 

.. _artaiosin-label: 

Second Inputfile: :code:`artaios.in`
------------------------------------

This input file will be used to perform the electron transport calculation.

- Note one: depending on the previous single point calculation the :code:`mos` parameter has to be set to a different filename.
  If :code:`qc_prog` is set to :code:`"turbomole"` is used with :code:`resulution of identity` equal to :code:`true` set :code:`mos` to :code:`ASE.TM.ridft.out` otherwise set to :code:`ASE.TM.dscf.out`
  If :code:`qc_prog` is set to :code:`"gaussian"` set to :code:`g09.log`.


- Note two: the :code:`print_green` parameter has to be provided explicitly!


.. _snfout-label: 

Third input file: output from previous vibrational calculation
--------------------------------------------------------------

This file has to be created by a prior calculations to calculate vibrational normal modes. 
Supported formates:

   - SNF-output
   - Gaussian-output
   - Turbomole-output


.. _ASE-turbomole: https://wiki.fysik.dtu.dk/ase/ase/calculators/turbomole.html


Postprocessing
==============

pyIETS also contains some tools for post-processing which are described in the following.

:code:`pyiets-plot`
^^^^^^^^^^^^^^^^^^^
Plotting of the IETS spectrum. Type

.. code-block:: bash
   
   pyiets-plot iets.dat iets.png

to visualize the results. 


:code:`pyiets-compplot`
^^^^^^^^^^^^^^^^^^^

Plotting of two IETS spectra. Type

.. code-block:: bash
   
   pyiets-plot iets0.dat iets1.dat iets.png

to compare two IETS-spectra. 


:code:`pyiets-gaussian-broadening`
^^^^^^^^^^^^^^^^^^^

Plotting of IETS spectra with Gaussian broadening. Type

.. code-block:: bash

   pyiets-gaussian-broadening iets.dat iets-filtered.dat iets-filtered.png <sampling> <fwhm>

to create IETS-data with a sampling of <sampling>. The signal is filtered with a Gaussian with a FWHM of <fwhm> in units of 1/cm.


:code:`pyiets-clean`
^^^^^^^^^^^^^^^^^^^

Clean up the temporary folders (:code:`mode_folder` and :code:`output_folder`) via

.. code-block:: bash

   pyiets-clean .




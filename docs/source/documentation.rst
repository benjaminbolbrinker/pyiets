.. _documentation-label:

Documentation
=============

In the following sections explain the usage and all relevant input files with corresponding parameters.

.. _inputfiles-label:

Usage
-----

1) Calculate the normal modes of a given input geometry using Gaussian, Turbomole or SNF and copy the output file (e.g. :code:`g98.out`, :code:`aoforce.out` or :code:`snf.out`) in your working directory.

2) Create an input file for ARTAIOS in your working directory.

3) Create a file :code:`input.json` containing at the following working example

.. code-block:: json

   {
   "sp_control": {
         "qc_prog": "turbomole",
         "params": {
           "use resolution of identity": false,
           "define_str": "\n\na coord\n*\nno\nb all TZ\n*\neht\n\n\n\n*"
         }
   },
   "vib_out": "snf",
   "vib_out_file": "snf.out",
   "artaios_in": "artaios.in",
   "mp": 4
   }

This tells PyIETS to use Turbomole for single point calculations by employing the parameters provided in :code:`params`.
The following three parameters tell PyIETS the names of the files created in step 1) and 2). 
The flag :code:`mp` specifies the number of single point calculations that will be run in parallel (each on a different core).

Input files
----------
The proram takes three input files. In the following each file is described in detail including a complete list of input parameters.

.. _inputjson-label: 

First input file: :code:`input.json`
^^^^^^^^^^^^^^^^^^

- :code:`artaios_bin` ARTAIOS executable (default: :code:`artaios`).

- :code:`artaios_restart_file` the name of the file containing information about already finished single point calculations (default: :code:`artaios.restart`)
  
- :code:`artaios_out` name of the files containing ARTAIOS logs (default: :code:`artaios_out`)

- :code:`artaios_stdout` name of the files containing ARTAIOS standard output (default: :code:`artaios.in.stdout`)

- :code:`artaios_stderr` name of the files containing ARTAIOS error output(default: :code:`artaios.in.stderr`)

- :code:`artaios_tm` ARTAIOS-tm2unformcl executable (default: :code:`tm2unformcl`).

- :code:`cstep` distortion in Bohr (default: :code:`0.01`)

- :code:`iets_out_file` name or path of output file. This file contains the IETS-spectrum and is generated by running pyIETS (default: :code:`iets.dat`).

- :code:`input_file` filename of the json file which contains the program configuration (default: :code:`input.json`)

- :code:`mp` number of cores to be used. pyIETS will start TURBOMOLE and ARTAIOS on different cores. Depending on the functional and basis set you use the single point calculations are the most time consuming part of the calculation. The number of single point calculations performed by the pyIETS is proportional to the number of modes one specifies in :code:`modes`. A total of 2* :code:`modes` + 1 single point calculations are performed. For highest efficiency choose a multiple of this value (default: :code:`1`).

- :code:`mode_folder` folder containing ARTAIOS transport calculations to calculate the greensmatrices of the distorted geometries (default: :code:`distortions`)

- :code:`modes` either a string or a list of integers specifying the modes for which pyIETS calculates inelastric tunneling intensities. If a list is provided the vibrational modes in the file specified by :code:`vib_out_file` are accessed by index. Note however, indexing starts from 0. That means modes 1, 2, 3 in the file specified by :code:`vib_out_file` are accessed by :code:`[0, 1, 2]` (default: :code:`"all"`).

- :code:`output_folder` folder containing ARTAIOS transport calculations while taking the Troisi greensmatrices as input (default: :code:`output`)

- :code:`output_folder_prefix` prefix of the subfolders in :code:`output_folder` (default: :code:`mode`)

- :code:`restart` if set to :code:`true` looks for :code:`mode_folder` and :code:`output_folder` to restart old calculations. This can save a lot of time and resources (default: :code:`false`). DO NOT change to :code:`true` if you changed parameters after the prior run of pyIETS!

- :code:`sp_control` dictionary containing options for single point calculation:

   - :code:`qc_prog` string defining the quantum chemistry program (default: :code:`"turbomole"`).

   - :code:`params` dictionary containing parameters for single point calculation (default: :code:`null`). 

      - here you can set all parameters provided by ASE to control the single point calculations started by pyIETS. If you use turbomole a list of all parameters can be seen here ASE-turbomole_.

- :code:`sp_restart_file` the name of the file containing information about already finished single point calculations (default: :code:`sp.restart`)

- :code:`sp_name` name of the folder that will contain the single point calculation of the undistorted structure (default: :code:`sp`)

- :code:`troisi_greenmatrix_file` name of the file containing the Troisi greensmatrix that will be calculated (default: :code:`greenmatrix`)

- :code:`verbose` switching on/off of verbose output for debugging (default: :code:`false`)

- :code:`vib_out` set to :code:`"snf"`, :code:`gaussian` or :code:`turbomole`

- :code:`vib_out_file` path to file in which normal where calculated (default: :code:`snf.out`). Gaussian and SNF input files are supported (see :code:`vib_out`).

.. _artaiosin-label: 

Second Inputfile: :code:`artaios.in`
^^^^^^^^^^^^^^^^^^

This input file will be used to perform the electron transport calculation.

- Note one: depending on the previous single point calculation the :code:`mos` parameter has to be set to a different filename.
  E.g. when turbomole is used with :code:`resulution of identity = true` set :code:`mos` to :code:`ASE.TM.ridft.out` otherwise set to :code:`ASE.TM.dscf.out`

- Note two: the :code:`print_green` parameter has to be provided explicitly!


.. _snfout-label: 

Third input file: output from previous vibrational calculation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This file has to be created by a prior calculations to calculate vibrational normal modes. 
Supported formates:

   - SNF-output
   - Gaussian-output
   - Turbomole-output


.. _ASE-turbomole: https://wiki.fysik.dtu.dk/ase/ase/calculators/turbomole.html



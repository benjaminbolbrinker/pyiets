#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import numpy as np
import matplotlib.pyplot as plt
import math


def first(x):
    return x[0]


def gaussian(x, sigma):
    return (1/(sigma*math.sqrt(2*math.pi)))*np.exp(-(x/sigma)**2/2)


if __name__ == '__main__':
    infilename = sys.argv[1]
    outfilename = sys.argv[2]
    savefig = sys.argv[3]
    sampling = int(sys.argv[4])
    HWHM = float(sys.argv[5])

    iets = np.loadtxt(infilename, dtype={
        'names': ('mode_idx', 'wavenumber', 'energy', 'intensity'),
        'formats': ('i8', 'f8', 'f8', 'f8')
    })
    wavenum_sample = np.linspace(min(iets['wavenumber']),
                                 max(iets['wavenumber']),
                                 num=sampling)
    point_distance = (max(iets['wavenumber']) -
                      min(iets['wavenumber']))/sampling
    signal = np.zeros(sampling)
    pair = list(zip(wavenum_sample, signal))
    signal_pair = list(zip(iets['wavenumber'], iets['intensity']))
    pair += signal_pair
    pair.sort(key=first)

    p_wavenum = [i[0] for i in pair]
    i_wavenum = [i[1] for i in pair]
    dx = (max(iets['wavenumber']) - min(iets['wavenumber']))/len(i_wavenum)

    sigma = 2*math.sqrt(2*math.log(2, math.e))
    gx = np.arange(-4*sigma, sigma*4, dx)
    gauss = [gaussian(x, sigma) for x in gx]

    result = np.convolve(i_wavenum, gauss, mode='full')

    while True:
        p_wavenum = [p_wavenum[0]-point_distance] + p_wavenum
        if len(p_wavenum) == len(result):
            break
        p_wavenum = p_wavenum + [p_wavenum[-1]+point_distance]
        if len(p_wavenum) == len(result):
            break

    plt.plot(p_wavenum, result)
    plt.savefig(savefig)
    np.savetxt(outfilename, list(zip(p_wavenum, result)),
               # fmt='{%d} {%.18e} {%d} {%.18e}')
               fmt=['%.18e', '%.18e'])
